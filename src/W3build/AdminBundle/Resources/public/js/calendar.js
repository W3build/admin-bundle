// Generated by CoffeeScript 1.7.1
var $, Calendar;

Calendar = (function() {
  var _createWeek, _dayOrder, _defaultOptions, _empty, _getFormatedDate, _getNextMonth, _getPrevMonth, _render, _renderDay, _renderMonth, _renderMonthHeaders;

  Calendar.SHOW_TYPE_MONTH = 'moth';

  Calendar.SHOW_TYPE_WEEK = 'week';

  Calendar.SHOW_TYPE_YEAR = 'year';

  Calendar.START_DAY_MONDAY = 'monday';

  Calendar.START_DAY_SUNDAY = 'sunday';

  _defaultOptions = {
    dayStates: {},
    showType: Calendar.SHOW_TYPE_MONTH,
    startDay: Calendar.START_DAY_MONDAY,
    startDate: new Date(),
    clickCallback: null,
    showMonthName: true,
    canChangeMonth: true,
    selectCurrent: true,
    selectedDay: null,
    dayNames: {
      0: "Neděle",
      1: "Pondělí",
      2: "Úterý",
      3: "Středa",
      4: "Čtvrtek",
      5: "Pátek",
      6: "Sobota"
    },
    monthNames: {
      0: 'Leden',
      1: 'Unor',
      2: 'Březen',
      3: 'Duben',
      4: 'Květen',
      5: 'Červen',
      6: 'Červenec',
      7: 'Srpen',
      8: 'Září',
      9: 'Říjen',
      10: 'Listopad',
      11: 'Prosinec'
    }
  };

  _dayOrder = {
    monday: [1, 2, 3, 4, 5, 6, 0],
    sunday: [0, 1, 2, 3, 4, 5, 6]
  };

  function Calendar(element, options) {
    if (options == null) {
      options = {};
    }
    this.element = $(element);
    this.options = _defaultOptions;
    $.extend(this.options, options);
    if (this.options.selectedDay) {
      this.options.selectedDay = new Date(this.options.selectedDay);
      this.options.startDate = this.options.selectedDay;
    }
    if (this.options.selectedDay === null && this.options.selectCurrent) {
      this.options.selectedDay = new Date();
    }
    _render.call(this);
  }

  Calendar.prototype.setDayStates = function(dayStates) {
    if (dayStates == null) {
      dayStates = {};
    }
    if (dayStates) {
      return this.options.dayStates = dayStates;
    }
  };

  _render = function() {
    switch (this.options.showType) {
      case Calendar.SHOW_TYPE_MONTH:
        return _renderMonth.call(this);
      case Calendar.SHOW_TYPE_WEEK:
        return _renderWeek.call(this);
      case Calendar.SHOW_TYPE_YEAR:
        return _renderYear.call(this);
      default:
        throw 'Unknow render type';
    }
  };

  _renderMonth = function() {
    var back, currentDate, firstDay, firstDayOfMonthNumber, lastDay, lastDayOfMonthNumber, plus, remainigDayInWeek, renderedDay, specific, week, _results;
    firstDay = new Date(this.options.startDate.getFullYear(), this.options.startDate.getMonth(), 1);
    firstDayOfMonthNumber = firstDay.getDay();
    lastDay = new Date(this.options.startDate.getFullYear(), this.options.startDate.getMonth() + 1, 0);
    lastDayOfMonthNumber = lastDay.getDay();
    switch (this.options.startDay) {
      case Calendar.START_DAY_MONDAY:
        if (firstDayOfMonthNumber === 0) {
          back = 6;
        } else {
          back = firstDayOfMonthNumber - 1;
        }
        if (lastDayOfMonthNumber !== 0) {
          plus = 7 - lastDayOfMonthNumber;
        }
        break;
      case Calendar.START_DAY_SUNDAY:
        back = firstDayOfMonthNumber - 1;
        plus = 6 - lastDayOfMonthNumber;
        break;
      default:
        throw 'Unknow start day type';
    }
    if (back) {
      firstDay.setDate(firstDay.getDate() - back);
    }
    if (plus) {
      lastDay.setDate(lastDay.getDate() + plus);
    }
    renderedDay = firstDay;
    lastDay.setDate(lastDay.getDate() + 1);
    _empty.call(this);
    _renderMonthHeaders.call(this);
    if (this.options.showMonthName === false) {
      $('.customCalendarHolder .monthName').hide();
    }
    if (this.options.canChangeMonth === false) {
      $('.customCalendarHolder .prevMonth').hide();
      $('.customCalendarHolder .nextMonth').hide();
    }
    currentDate = new Date();
    week = 1;
    _createWeek.call(this, 1);
    remainigDayInWeek = 7;
    _results = [];
    while (renderedDay < lastDay) {
      specific = '';
      if (new Date(renderedDay.getFullYear(), renderedDay.getMonth()) < new Date(this.options.startDate.getFullYear(), this.options.startDate.getMonth())) {
        specific += ' prev';
      }
      if (new Date(renderedDay.getFullYear(), renderedDay.getMonth()) > new Date(this.options.startDate.getFullYear(), this.options.startDate.getMonth())) {
        specific += ' next';
      }
      if (_getFormatedDate(renderedDay) === _getFormatedDate(currentDate)) {
        specific += ' current';
      }
      if (_getFormatedDate(this.options.selectedDay) === _getFormatedDate(renderedDay)) {
        specific += ' selected';
      }
      _renderDay.call(this, renderedDay, week, specific);
      renderedDay.setDate(renderedDay.getDate() + 1);
      remainigDayInWeek -= 1;
      if (remainigDayInWeek === 0) {
        week += 1;
        remainigDayInWeek = 7;
        _results.push(_createWeek.call(this, week));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  _createWeek = function(number) {
    return $('.customCalendar tbody', this.element).append('<tr class="week_' + number + '"></tr>');
  };

  _getFormatedDate = function(date) {
    return date.getFullYear() + '-' + ('0' + (date.getMonth() + 1)).slice(-2) + '-' + ('0' + date.getDate()).slice(-2);
  };

  _renderDay = function(day, week, specific) {
    var formatedDay, _this;
    if (specific == null) {
      specific = '';
    }
    formatedDay = _getFormatedDate(day);
    specific = typeof this.options.dayStates[formatedDay] === 'undefined' ? specific : specific + ' ' + this.options.dayStates[formatedDay];
    $('.customCalendar tbody tr.week_' + week, this.element).append('<td class="day' + specific + '" data-date="' + formatedDay + '">' + day.getDate() + '</td>');
    _this = this;
    return $('.customCalendarHolder .day').unbind('click').bind('click', function(e) {
      e.preventDefault();
      _this.options.selectedDay = new Date($(this).attr('data-date'));
      if ($(this).hasClass('prev')) {
        _getPrevMonth.call(_this);
      } else {
        if ($(this).hasClass('next')) {
          _getNextMonth.call(_this);
        } else {
          _render.call(_this);
        }
      }
      if (typeof _this.options.clickCallback === 'function') {
        _this.options.clickCallback(_getFormatedDate(_this.options.selectedDay));
      }
      return false;
    });
  };

  _empty = function() {
    this.element.empty();
    this.element.append('<div class="customCalendarHolder"></div>');
    return $('.customCalendarHolder', this.element).append('<table class="customCalendar"><thead><tr></tr></thead><tbody></tbody></table>');
  };

  _getNextMonth = function() {
    this.options.startDate = new Date(this.options.startDate.getFullYear(), this.options.startDate.getMonth() + 1, 1);
    return _renderMonth.call(this);
  };

  _getPrevMonth = function() {
    this.options.startDate = new Date(this.options.startDate.getFullYear(), this.options.startDate.getMonth() - 1, 1);
    return _renderMonth.call(this);
  };

  _renderMonthHeaders = function() {
    var dayNumber, _i, _len, _ref, _results;
    $('.customCalendar thead', this.element).append('<tr><th class="prevMonth"><<</th><th colspan="5" class="monthName">' + this.options.monthNames[this.options.startDate.getMonth()] + ' ' + this.options.startDate.getFullYear() + '</th><th class="nextMonth">>></th></tr>');
    $('.customCalendarHolder .prevMonth').unbind('click').bind('click', (function(_this) {
      return function(e) {
        e.preventDefault();
        _getPrevMonth.call(_this);
        return false;
      };
    })(this));
    $('.customCalendarHolder .nextMonth').unbind('click').bind('click', (function(_this) {
      return function(e) {
        e.preventDefault();
        _getNextMonth.call(_this);
        return false;
      };
    })(this));
    $('.customCalendar thead ', this.element).append('<tr class="dayNames"></tr>');
    _ref = _dayOrder[this.options.startDay];
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      dayNumber = _ref[_i];
      _results.push($('.customCalendar thead .dayNames', this.element).append('<th>' + this.options.dayNames[dayNumber] + '</th>'));
    }
    return _results;
  };

  return Calendar;

})();

$ = jQuery;

$.fn.extend({
  customCalendar: function(options) {
    var customCalendar;
    if (options == null) {
      options = {};
    }
    customCalendar = $.data(this[0], 'customCalendar');
    if (customCalendar) {
      return customCalendar;
    }
    customCalendar = new Calendar(this[0], options);
    $.data(this[0], 'customCalendar', customCalendar);
    return customCalendar;
  }
});
